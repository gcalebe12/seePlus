% Define the directory where your images are located
directory = 'C:\Users\Lenovo\Pictures\See+ (Images)\Black';

% Get the list of files in the directory
files = dir(fullfile(directory, '*.png')); % Change the extension if necessary

% Initialize vectors to store the results
areas = zeros(length(files), 1);
perimeters = zeros(length(files), 1);
centroids = zeros(length(files), 2);

% Loop through all the images
for i = 1:length(files)
    % Read the image
    image = imread(fullfile(directory, files(i).name));

    % Convert the image to grayscale
    grayImage = rgb2gray(image);

    % Binarize the image using a suitable threshold
    threshold = graythresh(grayImage);
    binarizedImage = im2bw(grayImage, threshold);

    % Invert the values of the binarized image to calculate the parameters of the inverted white region
    invertedBinarizedImage = imcomplement(binarizedImage);
    

    % Calculate the area of the white region (represents the stain) in the inverted image
    stainArea = bwarea(invertedBinarizedImage);
    areas(i) = stainArea;
    disp(['Area of stain ', num2str(i), ': ', num2str(areas(i)), ' pixels']);

    % Calculate the perimeter of the white region (represents the stain) in the inverted image
    stats = regionprops(invertedBinarizedImage, 'Perimeter');
    perimeters(i) = stats.Perimeter;
    disp(['Perimeter of stain ', num2str(i), ': ', num2str(perimeters(i)), ' pixels']);

    % Calculate the centroid also of the inverted image
    stats = regionprops(invertedBinarizedImage, 'Centroid');
    centroids(i, :) = stats.Centroid;

    % Display the centroid coordinates
    disp(['Centroid of stain ', num2str(i), ': (', num2str(centroids(i, 1)), ', ', num2str(centroids(i, 2)), ') pixels']);
end

% Plot the results over time
time = 1:length(files);

figure;

subplot(3, 1, 1);
plot(time, areas, 'o-');
title('Area of Stain Over Time');
xlabel('Time');
ylabel('Area');

subplot(3, 1, 2);
plot(time, perimeters, 'o-');
title('Perimeter of Stain Over Time');
xlabel('Time');
ylabel('Perimeter');

subplot(3, 1, 3);
plot(time, centroids(:, 1), 'o-', time, centroids(:, 2), 's-');
legend('X', 'Y');
title('Centroid of Stain Over Time');
xlabel('Time');
ylabel('Centroid Coordinates');

% Degree of the polynomial for fitting (can be adjusted as needed)
degree_polynomial = 2;

% Curve fitting for the area
coefficients_area = polyfit(time, areas, degree_polynomial);
function_area = polyval(coefficients_area, time);

% Curve fitting for the perimeter
coefficients_perimeter = polyfit(time, perimeters, degree_polynomial);
function_perimeter = polyval(coefficients_perimeter, time);

% Curve fitting for centroid X
coefficients_centroid_x = polyfit(time, centroids(:, 1), degree_polynomial);
function_centroid_x = polyval(coefficients_centroid_x, time);

% Curve fitting for centroid Y
coefficients_centroid_y = polyfit(time, centroids(:, 2), degree_polynomial);
function_centroid_y = polyval(coefficients_centroid_y, time);

% Displaying the polynomial coefficients for each parameter
disp('Polynomial coefficients for the area:');
disp(coefficients_area);

disp('Polynomial coefficients for the perimeter:');
disp(coefficients_perimeter);

disp('Polynomial coefficients for centroid X:');
disp(coefficients_centroid_x);

disp('Polynomial coefficients for centroid Y:');
disp(coefficients_centroid_y);
