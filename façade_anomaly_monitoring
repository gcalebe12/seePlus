% Define the directory where your images are located
directory = 'C:\Users\Lenovo\Documents\IST\Pesquisa SEE+\Fachada sem e com anomalias'; % Replace with the correct path

% Get the list of files in the directory
files = dir(fullfile(directory, '*.png')); % Change the extension if necessary

% Define the desired colors for each class
desired_colors = {
   [255, 242, 204], % Cladding
   [112, 173, 71], % Green Stain
   [255, 0,0], % Red Stain
   [0, 176, 240] % Cracks
};

% Tolerance to consider a color
color_tolerance = 45;
% Tolerance to consider distance between centroids
distance_tolerance = 10;

% Initialize variables to store the area of class 1 in the first image
area_class1_first_img = 0;

% Initialize a structure to store statistics for each class
class_stats = struct('Class2', [], 'Class3', [], 'Class4', []);

% Initialize a structure to store centroids and labels for each class in each image
centroids_labels = struct('Class2', [], 'Class3', [], 'Class4', []);

% Loop over each image
for j = 1:length(files)
    % Read the image
    image = imread(fullfile(directory, files(j).name));
    
    % Check if it's the first image
    if j == 1
        % Loop over each class
        for i = 1:length(desired_colors)
            % Current color
            desired_color = desired_colors{i};
            
            % Replicate the color to create a matrix of the same size as the image
            desired_color_replicated = repmat(reshape(desired_color, 1, 1, 3), size(image, 1), size(image, 2), 1);
            
            % Calculate the mask for the desired color using color_tolerance
            color_mask = all(abs(double(image) - double(desired_color_replicated)) <= color_tolerance, 3);
            
            % Calculate the area of class 1
            if i == 1
                stats = regionprops(color_mask, 'Area');
                areas = cat(1, stats.Area);
                area_class1_first_img = sum(areas);
            end
        end
    else
        % Display information for each class
        disp(['Image ', num2str(j)]);
        
        % Initialize an empty mask for the current image
        current_mask = zeros(size(image, 1), size(image, 2));
        
        % Loop over classes 2, 3, and 4
        for i = 2:length(desired_colors)
            % Current color
            desired_color = desired_colors{i};
            
            % Replicate the color to create a matrix of the same size as the image
            desired_color_replicated = repmat(reshape(desired_color, 1, 1, 3), size(image, 1), size(image, 2), 1);
            
            % Calculate the mask for the desired color using color_tolerance
            color_mask = all(abs(double(image) - double(desired_color_replicated)) <= color_tolerance, 3);
            
            % Add the current mask to the overall mask
            current_mask = current_mask | color_mask;
            
            % Calculate the perimeter, area, and centroid of each connected component in the binary mask
            stats = regionprops(color_mask, {'Area', 'Perimeter', 'Centroid'});
            
            % Store the stats in the structure
            class_stats.(['Class' num2str(i)]){j} = stats;
            
            % Initialize centroids_labels structure if it's the first image
            if j == 2
                centroids_labels.(['Class' num2str(i)]) = cell(length(files), 1);
            end
            
            % Initialize centroids_labels structure for each class
            centroids_labels.(['Class' num2str(i)]){j} = cell(numel(stats), 2);
        end
        
        % Iterate over each connected component in the mask
        for i = 2:length(desired_colors)
            % Get centroids and labels from the previous image
            prev_centroids = centroids_labels.(['Class' num2str(i)]){j - 1};
            
            % Iterate over each connected component in the current mask
            for k = 1:numel(stats)
                % Check if it's the first image
                if j == 2
                    % Assign a new label
                    label = ['Anomaly ' char('A' + k - 1)];
                else
                    % Initialize variables to store the closest centroid and its distance
                    min_distance = Inf;
                    closest_label = '';
                    
                    % Iterate over previous centroids and labels
                    for l = 1:size(prev_centroids, 1)
                        % Calculate Euclidean distance between centroids
                        distance = sqrt(sum((stats(k).Centroid - prev_centroids{l, 1}).^2));
                        
                        % Check if the distance is smaller than the distance_tolerance
                        if distance < distance_tolerance && distance < min_distance
                            % Update closest label and distance
                            closest_label = prev_centroids{l, 2};
                            min_distance = distance;
                        end
                    end
                    
                    % Check if a matching label was found
                    if ~isempty(closest_label)
                        % Use the closest label
                        label = closest_label;
                    else
                        % Assign a new label
                        label = ['Anomaly ' char('A' + size(prev_centroids, 1))];
                    end
                end
                
                % Store centroid and label
                centroids_labels.(['Class' num2str(i)]){j}(k, :) = {stats(k).Centroid, label};
            end
        end
        
        % Calculate the perimeter and centroid for each connected component in the overall mask
        stats = regionprops(current_mask, {'Perimeter', 'Centroid'});
        boundary = bwboundaries(current_mask);
        
        % Plot the image with all Perimeters and centroids
        figure;
        filled_color_mask = imfill(current_mask, 'holes'); % Fill the mask with white
        imshow(filled_color_mask);
        hold on;
        for k = 1:length(boundary)
            plot(boundary{k}(:,2), boundary{k}(:,1), 'r', 'LineWidth', 2);
            plot(stats(k).Centroid(1), stats(k).Centroid(2), 'b*', 'MarkerSize', 10);
        end
        hold off;
        title(['Perimeters and Centroids in Image ', num2str(j)]);
        xlabel('X Coordinate');
        ylabel('Y Coordinate');
    end

   % Display statistics for each class, starting from image 2
    if j > 1
        for i = 2:length(desired_colors)
            disp(['Class ', num2str(i), ' in Image ', num2str(j), ':']);
            stats = class_stats.(['Class' num2str(i)]){j};
            for k = 1:numel(stats)
                % Calculate area as a percentage of the area of class 1 in the first image
                area_percentage = (stats(k).Area / area_class1_first_img) * 100;
            
                disp(['  Anomaly ', num2str(k), ':']);
                disp(['    Centroid X: ', num2str(stats(k).Centroid(1)), ', Y: ', num2str(stats(k).Centroid(2))]);
                disp(['    Area (% of Class 1): ', num2str(area_percentage), '%']);
                disp(['    Perimeter: ', num2str(stats(k).Perimeter)]);
                disp(['    Label: ', centroids_labels.(['Class' num2str(i)]){j}{k, 2}]);
            end
        end
    end
end

% Initialize a structure to store the areas of each "Mancha" for each class and each image
areas_manchas = struct('Class2', [], 'Class3', [], 'Class4', []);

% Loop over each image
for j = 2:length(files)
    % Loop over each class
    for i = 2:length(desired_colors)
        % Initialize area vector for the current class
        area_vector = zeros(numel(class_stats.(['Class' num2str(i)]){j}), 1);
        
        % Loop over each "Mancha" in the current class
        for k = 1:numel(class_stats.(['Class' num2str(i)]){j})
            % Retrieve area percentage for the current "Mancha" in the current class and image
            area_percentage = (class_stats.(['Class' num2str(i)]){j}(k).Area / area_class1_first_img) * 100;
            
            % Store area percentage in the area vector
            area_vector(k) = area_percentage;
        end
        
        % Store the area vector for the current class and image
        areas_manchas.(['Class' num2str(i)]) = [areas_manchas.(['Class' num2str(i)]); area_vector];
    end
end


% Initialize area and perimeter vectors for each class and each "Mancha"
max_manchas_class2 = max(cellfun(@numel, class_stats.Class2));
max_manchas_class3 = max(cellfun(@numel, class_stats.Class3));
max_manchas_class4 = max(cellfun(@numel, class_stats.Class4));
areas_class2 = zeros(length(files) - 1, max_manchas_class2);
areas_class3 = zeros(length(files) - 1, max_manchas_class3);
areas_class4 = zeros(length(files) - 1, max_manchas_class4);
perimeters_class2 = zeros(length(files) - 1, max_manchas_class2);
perimeters_class3 = zeros(length(files) - 1, max_manchas_class3);
perimeters_class4 = zeros(length(files) - 1, max_manchas_class4);

% Loop over each image
for j = 2:length(files)
    % Loop over each class
    for i = 2:length(desired_colors)
        % Initialize area and perimeter vectors for the current class and "Mancha"
        area_vector = zeros(1, numel(class_stats.(['Class' num2str(i)]){j}));
        perimeter_vector = zeros(1, numel(class_stats.(['Class' num2str(i)]){j}));
        
        % Loop over each "Mancha" in the current class
        for k = 1:numel(class_stats.(['Class' num2str(i)]){j})
            % Retrieve area and perimeter for the current "Mancha" in the current class and image
            area_percentage = (class_stats.(['Class' num2str(i)]){j}(k).Area / area_class1_first_img) * 100;
            perimeter = class_stats.(['Class' num2str(i)]){j}(k).Perimeter;
            
            % Store area percentage and perimeter in the respective vectors
            area_vector(k) = area_percentage;
            perimeter_vector(k) = perimeter;
        end
        
        % Update the corresponding area and perimeter vectors for the current class and image
        switch i
            case 2
                areas_class2(j-1, 1:numel(class_stats.(['Class' num2str(i)]){j})) = area_vector;
                perimeters_class2(j-1, 1:numel(class_stats.(['Class' num2str(i)]){j})) = perimeter_vector;
            case 3
                areas_class3(j-1, 1:numel(class_stats.(['Class' num2str(i)]){j})) = area_vector;
                perimeters_class3(j-1, 1:numel(class_stats.(['Class' num2str(i)]){j})) = perimeter_vector;
            case 4
                areas_class4(j-1, 1:numel(class_stats.(['Class' num2str(i)]){j})) = area_vector;
                perimeters_class4(j-1, 1:numel(class_stats.(['Class' num2str(i)]){j})) = perimeter_vector;
        end
    end
end

% Plot a graph for each class (áreas e perímetros)
for i = 2:length(desired_colors)
    % Initialize data for the current class (áreas)
    switch i
        case 2
            data_areas = areas_class2;
            data_perimeters = perimeters_class2;
        case 3
            data_areas = areas_class3;
            data_perimeters = perimeters_class3;
        case 4
            data_areas = areas_class4;
            data_perimeters = perimeters_class4;
    end
    
    % Plot graphs for áreas do current class
    figure;
    for k = 1:size(data_areas, 2)
        subplot(2, 1, 1);
        plot(2:length(files), data_areas(:, k), '-o', 'DisplayName', ['Anomaly ' char('A' + k - 1)]);
        hold on;
    end
    hold off;
    title(['Area for Class ', num2str(i)]);
    xlabel('Image number');
    ylabel('Area (%)');
    legend('Location', 'best');
    
    % Plot graphs for perímetros do current class
    for k = 1:size(data_perimeters, 2)
        subplot(2, 1, 2);
        plot(2:length(files), data_perimeters(:, k), '-o', 'DisplayName', ['Anomaly ' char('A' + k - 1)]);
        hold on;
    end
    hold off;
    title(['Perimeter for Class ', num2str(i)]);
    xlabel('Image number');
    ylabel('Perimeter');
    legend('Location', 'best');
end


